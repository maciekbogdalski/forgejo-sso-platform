- name: Ensure vagrant user is in the docker group
  hosts: all
  tasks:
    - name: Add vagrant user to docker group
      user:
        name: vagrant
        groups: docker
        append: yes
      become: yes

- name: Docker setup
  hosts: all
  tasks:
    - name: Add Docker APT repository key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      become: yes

    - name: Add Docker APT repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present
      become: yes

    - name: Install Docker and docker-compose plugin
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present
        update_cache: yes
      become: yes

- name: NFS setup
  hosts: control
  roles:
    - role: nfs

- name: Initialize Docker Swarm on manager
  hosts: control
  tasks:
    - name: Leave existing swarm if any (manager)
      command: docker swarm leave --force
      ignore_errors: yes

    - name: Initialize Docker Swarm on manager
      command: docker swarm init --advertise-addr {{ ansible_host }}
      register: swarm_init_result
      changed_when: "'Swarm initialized' in swarm_init_result.stdout"
      ignore_errors: true

    - name: Set fact if swarm already exists
      set_fact:
        swarm_already_exists: true
      when: "'This node is already part of a swarm' in swarm_init_result.stderr"

    - name: Ensure swarm_already_exists is defined
      set_fact:
        swarm_already_exists: false
      when: swarm_already_exists is not defined

    - name: Get worker join token
      command: docker swarm join-token -q worker
      register: worker_join_token
      when: not swarm_already_exists

    - name: Set worker join token fact
      set_fact:
        worker_join_token: "{{ worker_join_token.stdout }}"
      when: not swarm_already_exists

- name: Join Docker Swarm as worker
  hosts: target1:target2
  tasks:
    - name: Leave existing swarm if any (worker)
      command: docker swarm leave --force
      ignore_errors: yes

    - name: Join Docker Swarm as worker
      command: docker swarm join --token {{ hostvars['control']['worker_join_token'] }} {{ hostvars['control']['ansible_host'] }}:2377
      ignore_errors: yes

- name: Verify Docker Swarm
  hosts: control
  tasks:
    - name: Check Docker Swarm nodes
      command: docker node ls
      register: docker_nodes

    - name: debug
      debug:
        var: docker_nodes.stdout

- name: Deploy a simple Docker service
  hosts: control
  tasks:
    - name: Ensure /srv/nginx directory exists
      file:
        path: /srv/nginx
        state: directory
      become: yes

    - name: Install Docker SDK for Python and docker-compose
      pip:
        name:
          - docker
          - docker-compose
      become: yes

    - name: Create Docker Swarm network as attachable
      command: docker network create --driver overlay --attachable webnet
      ignore_errors: yes
      register: create_network_result

    - name: Check if Docker Swarm network was created
      command: docker network ls
      register: network_list

    - name: Debug Docker Swarm network list
      debug:
        var: network_list.stdout

    - name: Create Docker Compose file for nginx
      copy:
        dest: /srv/nginx/docker-compose.yml
        content: |
          version: '3.9'
          services:
            web:
              image: nginx:latest
              ports:
                - "8080:80"
              networks:
                - webnet
          networks:
            webnet:
              external: true
      become: yes

    - name: Deploy nginx service
      community.docker.docker_compose_v2:
        project_src: /srv/nginx
        state: present
      become: yes

    - name: Wait for nginx service to start
      pause:
        seconds: 15

    - name: Check Docker services status
      command: docker service ls
      register: docker_services_status

    - name: debug
      debug:
        var: docker_services_status.stdout

- name: Configure Docker Registry with Authentication and HTTPS
  hosts: control
  tasks:
    - name: Install apache2-utils
      apt:
        name: apache2-utils
        state: present
        update_cache: yes
      become: yes

    - name: Create registry cert and auth directories
      file:
        path: "/srv/registry/{{ item }}"
        state: directory
      with_items:
        - auth
        - cert
      become: yes

    - name: Create directory for registry certificates
      file:
        path: /srv/registry/cert
        state: directory
      become: yes

    - name: Generate RSA private key and certificate using OpenSSL
      command: openssl req -newkey rsa:4096 -nodes -keyout /srv/registry/cert/domain.key -x509 -days 365 -out /srv/registry/cert/domain.crt -subj "/C=US/ST=State/L=City/O=Organization/OU=Department/CN=example.com"
      become: yes

    - name: Create htpasswd file for registry authentication
      command: htpasswd -bBc /srv/registry/auth/htpasswd myuser mypassword
      become: yes

    - name: Create Docker Compose file for registry
      copy:
        dest: /srv/registry-compose.yml
        content: |
          version: '3.8'
          services:
            registry:
              image: registry:2
              ports:
                - "5000:5000"
              environment:
                REGISTRY_HTTP_TLS_CERTIFICATE: /certs/domain.crt
                REGISTRY_HTTP_TLS_KEY: /certs/domain.key
                REGISTRY_AUTH: htpasswd
                REGISTRY_AUTH_HTPASSWD_REALM: Registry Realm
                REGISTRY_AUTH_HTPASSWD_PATH: /auth/htpasswd
              volumes:
                - /srv/registry/cert:/certs
                - /srv/registry/auth:/auth
                - registry-data:/var/lib/registry
              networks:
                - registry_network
          networks:
            registry_network:
              driver: overlay
          volumes:
            registry-data:
      become: yes

    - name: Create Docker Swarm network if not exists
      command: docker network create --driver overlay registry_registry_network
      ignore_errors: yes
      register: create_network_result
      changed_when: create_network_result.rc == 0

    - name: Deploy Docker Registry stack
      command: docker stack deploy -c /srv/registry-compose.yml registry
      register: deploy_registry_stack
      ignore_errors: yes
      become: yes

    - name: debug deploy_registry_stack
      debug:
        var: deploy_registry_stack

- name: Login to Docker registry from manager and workers
  hosts: all
  tasks:
    - name: Login to Docker registry
      command: echo mypassword | docker login -u myuser --password-stdin https://your-registry-url
      register: login_result
      ignore_errors: yes
      become: yes

    - name: Debug login result
      debug:
        var: login_result

- name: Deploy PostgreSQL database for applications
  hosts: control
  tasks:
    - name: Create Docker Swarm network if not exists
      command: docker network create --driver overlay webnet
      ignore_errors: yes
      register: create_network_result
      changed_when: create_network_result.rc == 0

    - name: Create volume for PostgreSQL data
      command: docker volume create postgres_data
      register: postgres_volume_result
      changed_when: postgres_volume_result.rc == 0
      become: yes

    - name: Deploy PostgreSQL service
      command: >
        docker service create
        --name postgres
        --replicas 1
        --network webnet
        --mount type=volume,source=postgres_data,target=/var/lib/postgresql/data
        -e POSTGRES_PASSWORD=mysecretpassword
        -e POSTGRES_USER=admin
        -e POSTGRES_DB=main
        -e POSTGRES_MULTIPLE_DATABASES=forgejo,grafana,keycloak
        postgres:16.1
      register: postgres_service_result
      changed_when: postgres_service_result.rc == 0
      become: yes

    - name: Debug PostgreSQL service result
      debug:
        var: postgres_service_result

- name: Create OpenSSL configuration file for Traefik certificate
  hosts: control
  tasks:
    - name: Create directory for OpenSSL config
      file:
        path: /etc/traefik_cert
        state: directory

    - name: Create OpenSSL configuration file
      copy:
        dest: /etc/traefik_cert/openssl.cnf
        content: |
          [ req ]
          default_bits       = 2048
          default_md         = sha256
          default_keyfile    = privkey.pem
          distinguished_name = req_distinguished_name
          req_extensions     = req_ext
          x509_extensions    = v3_ca

          [ req_distinguished_name ]
          countryName                 = Country Name (2 letter code)
          stateOrProvinceName         = State or Province Name (full name)
          localityName                = Locality Name (eg, city)
          organizationName            = Organization Name (eg, company)
          organizationalUnitName      = Organizational Unit Name (eg, section)
          commonName                  = Common Name (eg, fully qualified host name)
          emailAddress                = Email Address

          [ req_ext ]
          subjectAltName = @alt_names

          [ v3_ca ]
          subjectAltName = @alt_names

          [ alt_names ]
          DNS.1 = *.vcc.local

    - name: Run traefik_cert_init container with custom OpenSSL configuration
      shell: |
        docker run --rm -v /etc/traefik_cert:/etc/traefik_cert -v /certs:/certs debian sh -c "
        apt-get update && apt-get install -y openssl &&
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /certs/traefik.key -out /certs/traefik.crt -config /etc/traefik_cert/openssl.cnf -subj '/C=US/ST=Denial/L=Springfield/O=Dis/CN=traefik.vcc.local'"

    - name: Verify the Traefik certificate
      shell: openssl x509 -text -noout -in /certs/traefik.crt
      register: cert_output

    - name: Display certificate details
      debug:
        var: cert_output.stdout

- name: Deploy Traefik service in Docker Swarm
  hosts: control
  tasks:
    - name: Create Docker Swarm network if not exists
      command: docker network create --driver overlay traefik-net
      ignore_errors: yes

    - name: Create directory for Traefik certificates
      file:
        path: /etc/traefik/certs
        state: directory

    - name: Ensure /certs directory is readable
      command: chmod -R 755 /certs
      ignore_errors: yes

    - name: Copy Traefik certificate files
      copy:
        src: /certs/
        dest: /etc/traefik/certs/
        owner: root
        group: root
        mode: '0644'

    - name: Deploy Traefik service
      command: >
        docker service create
        --name traefik
        --constraint 'node.role == manager'
        --publish 80:80
        --publish 443:443
        --mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock
        --mount type=bind,source=/etc/traefik/certs,target=/certs
        --network traefik-net
        --label traefik.enable=true
        --label traefik.http.routers.http-catchall.rule=HostRegexp('{host:.+}')
        --label traefik.http.routers.http-catchall.entrypoints=web
        --label traefik.http.routers.http-catchall.middlewares=https-redirect
        --label traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
        --label traefik.http.routers.https.rule=HostRegexp('{host:.+}')
        --label traefik.http.routers.https.entrypoints=websecure
        --label traefik.http.routers.https.tls=true
        --label traefik.http.routers.https.tls.certresolver=default
        --label traefik.http.routers.https.service=api@internal
        --label traefik.http.routers.https.tls.domains[0].main=*.vcc.local
        --label traefik.http.routers.https.tls.certresolver=myresolver
        --label traefik.metrics.prometheus=true
        --label traefik.accesslog=true
        --label traefik.http.services.traefik.loadbalancer.server.port=8080
        traefik:v2.10.7
      ignore_errors: yes

    - name: Verify Traefik service deployment
      shell: docker service ls | grep traefik
      register: traefik_service_status
      ignore_errors: yes

    - name: Debug Traefik service status
      debug:
        var: traefik_service_status.stdout

- name: Deploy Keycloak service in Docker Swarm
  hosts: control
  tasks:
    - name: Ensure Keycloak import directory exists
      file:
        path: /srv/keycloak/import
        state: directory
        mode: '0755'
      become: yes

    - name: Copy Keycloak realm import file
      copy:
        src: /home/vagrant/exam-2023-2024-vcc_mb/project/keycloak-20.0.3/bin/vcc-realm.json  # Update this path if needed
        dest: /srv/keycloak/import/vcc-realm.json
        owner: root
        group: root
        mode: '0644'
      become: yes
      

    - name: Remove existing Keycloak service if any
      command: docker service rm keycloak
      ignore_errors: yes
      register: remove_keycloak_service_result
      changed_when: remove_keycloak_service_result.rc == 0

    - name: Debug Keycloak service removal result
      debug:
        var: remove_keycloak_service_result

    - name: Deploy Keycloak service
      command: >
        docker service create --name keycloak
        --replicas 1
        --network webnet
        --publish published=8180,target=8180
        --env KEYCLOAK_USER=admin
        --env KEYCLOAK_PASSWORD=admin
        --env DB_VENDOR=postgres
        --env DB_ADDR=postgres
        --env DB_DATABASE=keycloak
        --env DB_USER=admin
        --env DB_PASSWORD=mysecretpassword
        --env KEYCLOAK_HOSTNAME=auth.vcc.local
        --env KEYCLOAK_IMPORT=/opt/keycloak/data/import/vcc-realm.json
        --constraint 'node.role==manager'
        --mount type=bind,source=/srv/keycloak/import,target=/opt/keycloak/data/import
        quay.io/keycloak/keycloak:23.0.3 start-dev --http-port=8180 --hostname-url=http://auth.vcc.local
      register: keycloak_service_result
      ignore_errors: yes

    - name: Debug Keycloak service deployment result
      debug:
        var: keycloak_service_result

    - name: Verify Keycloak service deployment
      command: docker service ls
      register: keycloak_service_status
      ignore_errors: yes

    - name: Debug Keycloak service status
      debug:
        var: keycloak_service_status.stdout

    - name: Wait for Keycloak to start
      pause:
        seconds: 120
